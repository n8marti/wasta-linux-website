(function(){const pages=[{"idx":0,"href":"/hugo/home/about-save/","title":"About","content":" Wasta-Linux: About "},{"idx":1,"href":"/hugo/tutorials/create-bootable-usb/","title":"About","content":" Wasta-Linux: About "},{"idx":2,"href":"/hugo/tutorials/inplace-upgrade/","title":"About","content":" Wasta-Linux: About "},{"idx":3,"href":"/hugo/tutorials/kiwix/","title":"About","content":" Wasta-Linux: About "},{"idx":4,"href":"/hugo/tutorials/usb-install/","title":"About","content":" Wasta-Linux: About "},{"idx":5,"href":"/hugo/tutorials/virtualbox-install/","title":"About","content":" Wasta-Linux: About "},{"idx":6,"href":"/hugo/wasta-apps/wasta-backup/","title":"About","content":" Wasta-Linux: About "},{"idx":7,"href":"/hugo/wasta-apps/wasta-layout/","title":"About","content":" Wasta-Linux: About "},{"idx":8,"href":"/hugo/wasta-apps/wasta-menus/","title":"About","content":" Wasta-Linux: About "},{"idx":9,"href":"/hugo/wasta-apps/wasta-offline/","title":"About","content":" Wasta-Linux: About "},{"idx":10,"href":"/hugo/wasta-apps/wasta-resources/","title":"About","content":" Wasta-Linux: About "},{"idx":11,"href":"/hugo/home/customizing/","title":"Customizing","content":" Wasta-Linux: Customizing for your Needs Wasta-Linux is intended to be used as a base for regionally-localized Linux \u0026ldquo;customized\u0026rdquo; distributions specific to locations\u0026rsquo; needs (fonts, keyboards, applications, settings, included reference documents, etc.). Should you be interested in being a \u0026ldquo;regional customizer\u0026rdquo; of Wasta-Linux, please use the forums linked at the bottom of this page and someone will contact you.\nThere are 2 primary Wasta-Linux customizing methods, both of which can be used to create custom Wasta-Linux ISOs to re-distribute to users:\n Manual customization Basically, install Wasta-Linux on a clean test system, and make the adjustments you want manually. Then follow the process to create a custom Wasta-Linux ISO. If you make future modifications, you can re-create the ISO. But, any customizations you make in the future that you want to distribute to existing users that installed your previous ISO will need to be individually made on each machine. Due to this limitation, see method 2 below.\n Create a wasta-custom-xyz package The main advantage of creating a wasta-custom-xyz package is that any future adjustments you make to your customizations will be automatically re-distributed to anyone with the wasta-custom-xyz package installed when they update their system. Here is an overview of the process to create and maintain a wasta-custom-xyz package:\n Create a wasta-custom-xyz Package: Work with the Wasta-Linux team to create a new \u0026ldquo;package\u0026rdquo; called wasta-custom-xyz with all your desired customizations included. The Wasta-Linux team will create the first version of this package for you. Once this package is created, installing wasta-custom-xyz on any Wasta-Linux computer will include all of your customizations.\nExamples of customizations that can be included in a wasta-custom-xyz package include:\n LibreOffice Default Settings: Use .doc, .xls extensions, enable complex text layout, set default language settings, etc.\n Additional Keyboards: Install additional language keyboards.\n Additional Fonts: Install additional fonts\n Additional Applications: Install applications on ALL computers with wasta-custom-xyz such as Paratext, AdaptIt, FieldWorks, etc.\n System Default Settings: Customize settings such as the default background image, touchpad behavior, default \u0026ldquo;application favorites\u0026rdquo;, etc.\n Wasta-Menus Default List: Customize the default Applications that are included in Wasta-Menus.\n Reference Documents: Include a folder of reference documents that can optionally be linked to each users Home Directory.\n  Maintain the wasta-custom-xyz Package: Ideally any future modifications to this \u0026lsquo;wasta-custom-xyz\u0026rsquo; package will be made directly by you, the regional customizer. Follow this guide to maintain \u0026lsquo;wasta-custom-xyz\u0026rsquo; custom packages.\n (Optional) Create a Custom Wasta-Linux ISO: As with method 1 above, you can install Wasta-Linux on a clean test system, then install your wasta-custom-xyz package, and then follow the process to create a custom Wasta-Linux ISO.\n   "},{"idx":12,"href":"/hugo/home/download/","title":"Downloads","content":" Wasta-Linux: Downloads 18.04  Wasta-Linux-18.04.3-64Bit  updated: 2019-08-30 md5: f13a4cf5d18e8f40a5cfd0722dc1d814  Notes:\n Based on Ubuntu 18.04 \u0026ldquo;Bionic\u0026rdquo; Interface: Cinnamon is the default interface, with Gnome-Shell also installed Long-Term Support: Security updates provided by Ubuntu through April 2023 UEFI Compatible: Fully Compatible with newer UEFI and Secure Boot features used by Windows 8+ computers Linux Kernel: 5.0 (due to Ubuntu\u0026rsquo;s \u0026ldquo;Hardware Enablement Stack\u0026rdquo;\u0026hellip; the original 18.04 release included Linux Kernel 4.15) Paratext: Paratext 8.0 / 9 Beta supported (Paratext 7.5 not available)   Wasta-Linux 18.04.1 Hardware Compatibility Download ↕  Wasta-Linux 18.04.1 may be needed if you experience any hardware compatibility issues with the 5.0 Linux Kernel included in Wasta-Linux 18.04.3.\nWasta-Linux-18.04.1-64Bit  updated: 2018-09-27 md5: ce7f69957d92f11130732f37771dbac8      16.04  Wasta-Linux-16.04.4-64Bit  updated: 2018-04-04 md5: 5de5238868ceab725e2bbc914b1d471e  Wasta-Linux-16.04.4-32Bit  updated: 2018-04-04 md5: 378bab914f86f208af021146a68c38ea  Notes:\n Based on Ubuntu 16.04 \u0026ldquo;Xenial\u0026rdquo; Interface: Cinnamon is the default interface, with Ubuntu Unity also installed Long-Term Support: Security updates provided by Ubuntu through April 2021 UEFI Compatible: Fully Compatible with newer UEFI and Secure Boot features used by Windows 8+ computers Linux Kernel: 4.13 Paratext: Paratext 7.5 and Paratext 8.0 supported     Wasta-Linux Installation Tips and Tricks:  The above images can be put on a USB flash drive or DVD just like a standard Ubuntu or Linux Mint ISO.\n Follow these instructions if you aren\u0026rsquo;t starting with a Wasta-Linux ISO but rather want to upgrade your existing Ubuntu installation to Wasta-Linux.\n If you are wanting to do an \u0026ldquo;in-place upgrade\u0026rdquo; from a previous version of Wasta-Linux and don\u0026rsquo;t have a separate home partition, you can follow this guide.\n If you are wanting to run Wasta-Linux in VirtualBox, first read these instructions.\n To install Wasta-Linux to a portable, encrypted USB drive without touching the main OS on the computer, you can follow this guide.\n  "},{"idx":13,"href":"/hugo/home/faq/","title":"FAQ","content":" Wasta-Linux: Frequently Asked Questions Below are answers to some of the more common questions you may have about Wasta-Linux. First, a question and response that lays the foundation for Wasta-Linux:\nWhy Linux? One colleague answered the question \u0026ldquo;Why Linux\u0026rdquo; concisely using 3 main points. In brief, Linux is:\n Partner friendly: share with everyone, not only privledged organizations that have corporate license keys Budget friendly: not only does it not have a cost, it will also save support time Customizing friendly: adapt Linux to your use case, rather than having to adapt your usage to the limitations of a locked-down operating system that may not have you in mind as their target user base  Basically it is about freedom (not just \u0026ldquo;free as in no cost\u0026rdquo;), which means freedom to customize for our situation and for our specific users (see more below on this topic), freedom for all to use it, and \u0026ldquo;free from viruses.\u0026rdquo; * For more on these freedoms, please read the \u0026ldquo;case study\u0026rdquo; on our organization\u0026rsquo;s move from Windows to Linux in NE Africa.\n* Yes, eventually there may be Linux viruses, but its design is inherently more secure than Windows which was originally designed for single-user \u0026ldquo;non-networked\u0026rdquo; computers. Over the years Windows has applied security fixes in an \u0026ldquo;ad-hoc fashion\u0026rdquo; to try to account for today\u0026rsquo;s always online environment, but many inherent vulnerabilities remain. For the rest of the questions, click on them to see the response:\n Which Linux desktop and distribution is Wasta-Linux based on? ↕  With Ubuntu being recognized as the market leader in the Linux ecosystem, it was determined that using Ubuntu as a base for Wasta-Linux is the best choice. Using Ubuntu as a base ensures the broadest compatibility with Linux applications for Wasta-Linux.\nHowever, the default interface, called a \u0026lsquo;desktop environment\u0026rsquo; in Linux, used by Ubuntu proved challenging to use as it was not familiar enough for users coming from a Windows environment. After a lot of testing with several different Linux desktops, Cinnamon, created by the Linux Mint team, was chosen as the default interface for Wasta-Linux. For those that aren\u0026rsquo;t interested in adhering to a Windows-style interface, Cinnamon is flexible enough to be able to be reconfigured to match layouts inspired by macOS or Ubuntu\u0026rsquo;s Unity.\n    What customizations are included in Wasta-Linux? ↕  For the curious, here is a summary of some of the most significant modifications made to Wasta-Linux when compared to stock Ubuntu plus the Cinnamon desktop interface:\n \u0026ldquo;SIL ready\u0026rdquo;: The SIL Linux repository is included and standard SIL fonts have been added, so that applications such as Paratext, Bloom, Fieldworks, Adapt It, WeSay and kmfl (Keyman) are ready for installation from the Software Center.\n Several applications added, several others removed. Notable additions include:\n Wasta-Backup: simple \u0026ldquo;version backup\u0026rdquo; utility Wasta-Offline: offline software updates and installs Wasta-Layout: desktop layout settings utility Wasta-Menus: limits the visible applications in the Main Menu Wasta-Resources: centralized distribution of reference and documentation materials Bloom: Literacy materials development for language communities Skype Kdenlive: Non-linear video editing software GoldenDict: Offline (and online using Wikipedia or other sources) Dictionary / Thesaurus Modem Manager GUI: USB 3G modem tool for balance check and top-up commands Pinta: simple to use \u0026ldquo;MS Paint\u0026rdquo; alternative Kiwix: offline simple English version of Wikipedia (due to it\u0026rsquo;s size - 1.6 GB - it is not installed by default in Wasta-Linux) Klavaro: typing tutor some useful command-line utilities such as:  wavemon: a wifi network diagnostic tool traceroute iperf: a network throughput test tool   Centralized update and distribution of \u0026ldquo;future Wasta customizations\u0026rdquo;: No more being \u0026ldquo;stranded\u0026rdquo; as seems to happen with Ubuntu LTS releases.\n      What is the Wasta-Linux background story? ↕  Wasta-Linux development began in 2011-2012 in NE Africa (أهلا وسهلا) where it became apparent that the efforts of a couple IT workers would be better spent testing, evaluating, and customizing Linux to meet the local team\u0026rsquo;s computing needs rather than re-installing and configuring Windows every few months after the latest viruses swept through again. It continues to be used as the primary operating system of our partner organization in that location.\nSince 2014 the main development of Wasta-Linux has continued from Ethiopia (እንኳን ደህና መጣ) and it has become the primary operating system supported by our organization in Ethiopia, with nearly 200 installations and counting.\nRead more about the original motivations for Wasta-Linux in the \u0026ldquo;case study\u0026rdquo; on our organization\u0026rsquo;s move from Windows to Linux.\n    So, what is \u0026#39;wasta\u0026#39; anyway? ↕  \u0026ldquo;Wasta\u0026rdquo; literally means \u0026ldquo;intermediary\u0026rdquo;, but it implies more: it is seen as having \u0026ldquo;insider connections\u0026rdquo;, or \u0026ldquo;special favor or ability to \u0026lsquo;side-step the normal process.\u0026rsquo;\u0026rdquo; Think of needing to wait several days in the heat of a government office to get an official \u0026ldquo;stamp\u0026rdquo; on a piece of paper. If you have wasta, then you are able to come around through the \u0026ldquo;side door\u0026rdquo; and get the stamp immediately. So, Wasta-Linux is essentially \u0026ldquo;cutting to the front of the line\u0026rdquo; for new users to Linux in order to get a usable system without all the effort of starting from nothing. The analogy doesn\u0026rsquo;t work when taken too literally, however: don\u0026rsquo;t think there is anything unethical or illegal in the process! Wasta-Linux is just a light-hearted way to explain that you get the Linux you have been hoping exists without needing to hack on it to get it set up as you want!     How many Wasta-Linux users are there? ↕  Great question! There are several locations using Wasta-Linux around the world, with some locations working in an offline-only environment. This means a single download could represent 10s of users or more. As of 2019, it seems clear that there are at least 500 Wasta-Linux users, but it could be multiples of that number.     How can Wasta-Linux be customized to meet my needs? ↕  Beyond individual users that may find the Wasta-Linux system available here \u0026ldquo;as-is\u0026rdquo; to fit them well in their situations, it is intended that Wasta-Linux can be used as a base for \u0026ldquo;location specific customized versions\u0026rdquo; of Wasta-Linux (providing pre-installed location-specific fonts, keyboards, default applications, settings, reference documents and training materials, etc.). Once these \u0026ldquo;location specific customized Wasta-Linux versions\u0026rdquo; are made available, the ease of install of this customized Linux distribution will provide an opportunity for it to self-propagate throughout the region, even among low-tech computer users.\nIf customizing is of interest to you, please see this page: Wasta-Linux: Customizing for your needs\n   "},{"idx":14,"href":"/hugo/home/","title":"Homes","content":""},{"idx":15,"href":"/hugo/home/customizing/github-setup/","title":"Maintain a Custom Package","content":" Wasta-Linux: Maintain a Custom Package This page is part of the Wasta-Linux customizing process.\nGit is used for version control of all the Wasta-Linux custom packages. There is a Wasta-Linux organization on GitHub that contains separate GitHub repositories for each Wasta-Linux custom package. Any changes that are pushed up to these repositories are automatically copied every 6 hours to Launchpad, which is Ubuntu\u0026rsquo;s site for managing software. Once the code is in Launchpad, there is another automatic process that builds the actual software packages and places them in the Wasta-Linux Testing Launchpad PPA. Once the \u0026lsquo;Regional Customizer\u0026rsquo; (you!) confirms that the package from the Wasta-Linux Testing PPA is good, any Wasta-Linux Launchpad member can copy it to the main Wasta-Linux Launchpad PPA. This main PPA is already included in every Wasta-Linux system, so once the packages exist in the PPA, all Wasta-Linux users will be able to install them when they update their system.\nSo, as a maintainer of a Wasta-Linux custom package, all you will need to do is get your changes to GitHub, and after that you should find your updated package available for install in the next day when you update your system.\nHere then are the steps for maintaining a Wasta-Linux custom package. I will use the wasta-custom-eth package as an example.\n Setup (only needs to be done the first time)  Create a GitHub account and register a SSH key with GitHub\n Follow the steps in this [GitHub setup guide]/hugo/home/customizing/github-setup/)    0.2: Install needed dependencies on your machine\n Terminal command: sudo apt-get install build-essential devscripts dh-make dpkg-dev git  0.3: Configure git on your computer\n Terminal command: git config \u0026ndash;global user.email \u0026ldquo;you@example.com\u0026rdquo; Terminal command: git config \u0026ndash;global user.name \u0026ldquo;Your Name\u0026rdquo;  0.4: Adjust your profile so it will automatically enter your name and email when building the Wasta-Linux custom packages for local testing\n Terminal command: echo \u0026lsquo;export DEBFULLNAME=Your\\ Name\u0026rsquo; \u0026gt;\u0026gt; ~/.profile\n NOTE the \u0026ldquo;\\\u0026rdquo; delimiter to account for the space in the name (between \u0026ldquo;Your\u0026rdquo; and \u0026ldquo;Name\u0026rdquo; in this example)\n Terminal command: echo \u0026lsquo;export DEBEMAIL=you@example.com\u0026rsquo; \u0026gt;\u0026gt; ~/.profile\n The user name and email address should match those used in step 0.3 above.\n You will have to logout / login for these settings to take effect\n  0.5: Create a PGP key\n A PGP key is required to create a \u0026ldquo;local test package\u0026rdquo; of your Wasta-Linux custom package (see section 3 below)   \u0026ldquo;Passwords and Keys\u0026rdquo; app: \u0026ldquo;File | New\u0026rdquo; and then choose \u0026ldquo;PGP Key\u0026rdquo;   - IMPORTANT: do NOT enter a \u0026ldquo;key comment\u0026rdquo;, only enter \u0026ldquo;name\u0026rdquo; and \u0026ldquo;email\u0026rdquo;, or else there will be problems with using it later. The user name and email address should match those used in step 0.3 above. Setting the key to never expire should be OK. After entering a password, the key will be generated.\n Please wait, eventually the new key will show up under the \u0026ldquo;GnuPG Keys\u0026rdquo; tab, but unfortunately the application does not give much feedback during this key generation process\n  0.6: Create a \u0026ldquo;wasta-packages\u0026rdquo; folder on your machine to use for the source code of the Wasta-Linux custom packages\n0.7: Clone desired Wasta-Linux custom package to your wasta-packages folder\n Using the Wasta-Linux GitHub organization page, go to the wasta-custom-eth GitHub repository and click the \u0026ldquo;copy to clipboard\u0026rdquo; icon in the \u0026ldquo;SSH clone url:\u0026rdquo; section on the right bottom of the page.\n Right click on the \u0026ldquo;wasta-packages\u0026rdquo; folder created in 0.5 above and choose \u0026ldquo;Open in Terminal\u0026rdquo;\n Terminal command: git clone \u0026lt;pasted contents from your clipboard\u0026gt;\n Example: git clone git@github.com:wasta-linux/wasta-custom-eth.git\n The \u0026ldquo;wasta-custom-eth\u0026rdquo; folder containing the current source code will now exist in your \u0026ldquo;wasta-packages\u0026rdquo; folder.\n  1. Get Current Source\n - Right click on the \u0026ldquo;wasta-packages/wasta-custom-eth\u0026rdquo; folder and choose \u0026ldquo;Open in Terminal\u0026rdquo; Terminal command: git pull  2. Make changes to code\n2.1: Make any needed changes to the code\n  Here is a basic reference to the files in the \u0026ldquo;debian\u0026rdquo; folder, which is necessary to build the package after it finally arrives at Launchpad:  debian/control: Most important debian file. Defines dependencies and other package details.\n debian/install: Defines files installed on the system when the package is installed.\n Typically Wasta-Linux custom packages have an \u0026ldquo;install-files\u0026rdquo; folder where all the files installed by a package reside. Confirm in this \u0026ldquo;debian/install\u0026rdquo; file.\n Sometimes there is also a package name folder such as \u0026ldquo;wasta-custom-eth\u0026rdquo; in this example, that is installed to \u0026ldquo;/usr/share/wasta-custom-eth\u0026rdquo;. Again, this \u0026ldquo;debian/install\u0026rdquo; file will define these things.\n debian/changelog: Do NOT manually update this file, but instead use \u0026ldquo;dch\u0026rdquo; (see below).\n debian/postinst: Script executed after install of package. This should just call /usr/share/wasta-custom-eth/wasta-custom-eth-postinst.sh (I want this script easily accessible to others for reference: talk to me more if you want more gory details).\n  2.2: Use \u0026ldquo;dch\u0026rdquo; to create the new version and enter comments regarding what changes you will make\n  Terminal command: dch \u0026ndash;newversion 0.1.5 (replace 0.1.5 with your new version)  if prompted, choose \u0026ldquo;/bin/nano\u0026rdquo; as the editor, as it is the easiest to use.\n When using nano, the \u0026ldquo;\\^\u0026rdquo; character is entered using the \u0026ldquo;Control\u0026rdquo; key on your keyboard.\n Replace \u0026ldquo;UNRELEASED\u0026rdquo; with your series name\n 12.04: precise\n 14.04: trusty\n Enter some reasonable comments to document your changes. Reference older changelog entries for examples.\n Enter \u0026ldquo;\\^O\u0026rdquo; (again, Control + o) to save your changes.\n Enter \u0026ldquo;\\^X\u0026rdquo; (again, Control + X) to exit nano.\n  3. Build new local test version\n Terminal command: debuild -b\n Builds a \u0026ldquo;.deb\u0026rdquo; package file for local testing\n You must have a PGP key set up that will sign the packages. Creating the PGP key is above in step 0.5\n The resulting .deb will be created \u0026ldquo;up\u0026rdquo; one directory (in the wasta-packages folder created in step 0.6)\n \u0026ldquo;Lintian\u0026rdquo; checks are done looking for any standards violations. Clean up any errors found and re-run until it is clean.\n You can Google the full lintian phrase to see the warning description.\n The following \u0026ldquo;warnings\u0026rdquo; can be ignored:\n Terminal output: dpkg-gencontrol: warning: Depends field of package wasta-custom-eth: unknown substitution variable \\${shlibs:Depends}\n Use the created .deb to install manually on another local machine for testing to ensure all changes are applied correctly.\n The testing machine must have the same \u0026ldquo;architecture\u0026rdquo; (32 bit or 64 bit) as the machine you created the .deb on.\n  4. Use git to commit changes and push to GitHub repository\n IMPORTANT: clean up from debuild -b process!\n the \u0026ldquo;debuild -b\u0026rdquo; process from step 3 above creates some temporary build files that we don\u0026rsquo;t want to keep. Clean them up! This is important or else the next step to add files to git will add these temporary files, which we don\u0026rsquo;t want.\n Terminal command: debclean\n If you have added any new files to the folder, you will need to \u0026lsquo;add\u0026rsquo; them to git so they are part of the version control\n This is why it is important to run \u0026ldquo;debuild clean\u0026rdquo; first so that the temporary debian files won\u0026rsquo;t be added to version control!\n Terminal command: git add -A\n All files in the wasta-custom-eth folder not already part of git version control will be added\n Confirm git status (can be done at any time)\n Terminal command: git status\n Commit changes to git\n Terminal command: git commit -am \u0026ldquo;\u0026lt;short commit message\u0026gt;\u0026ldquo;\n Example: git commit -am \u0026ldquo;Adding LibreOffice Extension\u0026rdquo;\n   Push changes to GitHub\n Terminal command: git push\n  5. Use Launchpad to test the automatically built package in the Wasta-Linux Testing PPA and then manually copy to the main Wasta-Linux PPA\n5.1: Monitor Package build in Launchpad\n  Wasta-Linux Team Launchpad site: https://launchpad.net/~wasta-linux  Under \u0026ldquo;Related Projects\u0026rdquo; in the bottom right there should be a link to each Wasta-Linux custom package project\n The Launchpad Wasta-Linux custom package project should automatically pull in any changes from the GitHub repository every 6 hours.\n The Launchpad Wasta-Linux custom package project should automatically build packages from the updated source code every 24 hours.\n If you need to speed up either of these 2 processes, you can trigger them manually from the Launchpad Wasta-Linux custom package project\u0026rsquo;s code and recipes. Please contact the Wasta-Linux team if you need assistance with this process.\n By default, the packages are built in the Wasta-Linux Testing PPA.\n  5.2: Test package created in Wasta-Linux Testing PPA\n  Ensure you have the Wasta-Linux Testing PPA added to your system  Terminal command: sudo add-apt-repository ppa:wasta-linux/wasta-testing\n Update your package lists\n Terminal command: sudo apt-get update\n Install package\n Terminal command: sudo apt-get install wasta-custom-xyz\n  5.3: Copy package from Wasta-Linux Testing PPA to main Wasta-Linux PPA\n  Any Wasta-Linux Launchpad member can copy packages between PPAs.  Follow this guide to become a Wasta-Linux Launchpad member.\n Package is now available to all Wasta-Linux users.\n  []{#anchor}\n"},{"idx":16,"href":"/hugo/home/customizing/launchpad-setup/","title":"Maintain a Custom Package","content":" Wasta-Linux: Maintain a Custom Package This page is part of the Wasta-Linux customizing process.\nGit is used for version control of all the Wasta-Linux custom packages. There is a Wasta-Linux organization on GitHub that contains separate GitHub repositories for each Wasta-Linux custom package. Any changes that are pushed up to these repositories are automatically copied every 6 hours to Launchpad, which is Ubuntu\u0026rsquo;s site for managing software. Once the code is in Launchpad, there is another automatic process that builds the actual software packages and places them in the Wasta-Linux Testing Launchpad PPA. Once the \u0026lsquo;Regional Customizer\u0026rsquo; (you!) confirms that the package from the Wasta-Linux Testing PPA is good, any Wasta-Linux Launchpad member can copy it to the main Wasta-Linux Launchpad PPA. This main PPA is already included in every Wasta-Linux system, so once the packages exist in the PPA, all Wasta-Linux users will be able to install them when they update their system.\nSo, as a maintainer of a Wasta-Linux custom package, all you will need to do is get your changes to GitHub, and after that you should find your updated package available for install in the next day when you update your system.\nHere then are the steps for maintaining a Wasta-Linux custom package. I will use the wasta-custom-eth package as an example.\n Setup (only needs to be done the first time)  Create a GitHub account and register a SSH key with GitHub\n Follow the steps in this [GitHub setup guide]/hugo/home/customizing/github-setup/)    0.2: Install needed dependencies on your machine\n Terminal command: sudo apt-get install build-essential devscripts dh-make dpkg-dev git  0.3: Configure git on your computer\n Terminal command: git config \u0026ndash;global user.email \u0026ldquo;you@example.com\u0026rdquo; Terminal command: git config \u0026ndash;global user.name \u0026ldquo;Your Name\u0026rdquo;  0.4: Adjust your profile so it will automatically enter your name and email when building the Wasta-Linux custom packages for local testing\n Terminal command: echo \u0026lsquo;export DEBFULLNAME=Your\\ Name\u0026rsquo; \u0026gt;\u0026gt; ~/.profile\n NOTE the \u0026ldquo;\\\u0026rdquo; delimiter to account for the space in the name (between \u0026ldquo;Your\u0026rdquo; and \u0026ldquo;Name\u0026rdquo; in this example)\n Terminal command: echo \u0026lsquo;export DEBEMAIL=you@example.com\u0026rsquo; \u0026gt;\u0026gt; ~/.profile\n The user name and email address should match those used in step 0.3 above.\n You will have to logout / login for these settings to take effect\n  0.5: Create a PGP key\n A PGP key is required to create a \u0026ldquo;local test package\u0026rdquo; of your Wasta-Linux custom package (see section 3 below)   \u0026ldquo;Passwords and Keys\u0026rdquo; app: \u0026ldquo;File | New\u0026rdquo; and then choose \u0026ldquo;PGP Key\u0026rdquo;   - IMPORTANT: do NOT enter a \u0026ldquo;key comment\u0026rdquo;, only enter \u0026ldquo;name\u0026rdquo; and \u0026ldquo;email\u0026rdquo;, or else there will be problems with using it later. The user name and email address should match those used in step 0.3 above. Setting the key to never expire should be OK. After entering a password, the key will be generated.\n Please wait, eventually the new key will show up under the \u0026ldquo;GnuPG Keys\u0026rdquo; tab, but unfortunately the application does not give much feedback during this key generation process\n  0.6: Create a \u0026ldquo;wasta-packages\u0026rdquo; folder on your machine to use for the source code of the Wasta-Linux custom packages\n0.7: Clone desired Wasta-Linux custom package to your wasta-packages folder\n Using the Wasta-Linux GitHub organization page, go to the wasta-custom-eth GitHub repository and click the \u0026ldquo;copy to clipboard\u0026rdquo; icon in the \u0026ldquo;SSH clone url:\u0026rdquo; section on the right bottom of the page.\n Right click on the \u0026ldquo;wasta-packages\u0026rdquo; folder created in 0.5 above and choose \u0026ldquo;Open in Terminal\u0026rdquo;\n Terminal command: git clone \u0026lt;pasted contents from your clipboard\u0026gt;\n Example: git clone git@github.com:wasta-linux/wasta-custom-eth.git\n The \u0026ldquo;wasta-custom-eth\u0026rdquo; folder containing the current source code will now exist in your \u0026ldquo;wasta-packages\u0026rdquo; folder.\n  1. Get Current Source\n - Right click on the \u0026ldquo;wasta-packages/wasta-custom-eth\u0026rdquo; folder and choose \u0026ldquo;Open in Terminal\u0026rdquo; Terminal command: git pull  2. Make changes to code\n2.1: Make any needed changes to the code\n  Here is a basic reference to the files in the \u0026ldquo;debian\u0026rdquo; folder, which is necessary to build the package after it finally arrives at Launchpad:  debian/control: Most important debian file. Defines dependencies and other package details.\n debian/install: Defines files installed on the system when the package is installed.\n Typically Wasta-Linux custom packages have an \u0026ldquo;install-files\u0026rdquo; folder where all the files installed by a package reside. Confirm in this \u0026ldquo;debian/install\u0026rdquo; file.\n Sometimes there is also a package name folder such as \u0026ldquo;wasta-custom-eth\u0026rdquo; in this example, that is installed to \u0026ldquo;/usr/share/wasta-custom-eth\u0026rdquo;. Again, this \u0026ldquo;debian/install\u0026rdquo; file will define these things.\n debian/changelog: Do NOT manually update this file, but instead use \u0026ldquo;dch\u0026rdquo; (see below).\n debian/postinst: Script executed after install of package. This should just call /usr/share/wasta-custom-eth/wasta-custom-eth-postinst.sh (I want this script easily accessible to others for reference: talk to me more if you want more gory details).\n  2.2: Use \u0026ldquo;dch\u0026rdquo; to create the new version and enter comments regarding what changes you will make\n  Terminal command: dch \u0026ndash;newversion 0.1.5 (replace 0.1.5 with your new version)  if prompted, choose \u0026ldquo;/bin/nano\u0026rdquo; as the editor, as it is the easiest to use.\n When using nano, the \u0026ldquo;\\^\u0026rdquo; character is entered using the \u0026ldquo;Control\u0026rdquo; key on your keyboard.\n Replace \u0026ldquo;UNRELEASED\u0026rdquo; with your series name\n 12.04: precise\n 14.04: trusty\n Enter some reasonable comments to document your changes. Reference older changelog entries for examples.\n Enter \u0026ldquo;\\^O\u0026rdquo; (again, Control + o) to save your changes.\n Enter \u0026ldquo;\\^X\u0026rdquo; (again, Control + X) to exit nano.\n  3. Build new local test version\n Terminal command: debuild -b\n Builds a \u0026ldquo;.deb\u0026rdquo; package file for local testing\n You must have a PGP key set up that will sign the packages. Creating the PGP key is above in step 0.5\n The resulting .deb will be created \u0026ldquo;up\u0026rdquo; one directory (in the wasta-packages folder created in step 0.6)\n \u0026ldquo;Lintian\u0026rdquo; checks are done looking for any standards violations. Clean up any errors found and re-run until it is clean.\n You can Google the full lintian phrase to see the warning description.\n The following \u0026ldquo;warnings\u0026rdquo; can be ignored:\n Terminal output: dpkg-gencontrol: warning: Depends field of package wasta-custom-eth: unknown substitution variable \\${shlibs:Depends}\n Use the created .deb to install manually on another local machine for testing to ensure all changes are applied correctly.\n The testing machine must have the same \u0026ldquo;architecture\u0026rdquo; (32 bit or 64 bit) as the machine you created the .deb on.\n  4. Use git to commit changes and push to GitHub repository\n IMPORTANT: clean up from debuild -b process!\n the \u0026ldquo;debuild -b\u0026rdquo; process from step 3 above creates some temporary build files that we don\u0026rsquo;t want to keep. Clean them up! This is important or else the next step to add files to git will add these temporary files, which we don\u0026rsquo;t want.\n Terminal command: debclean\n If you have added any new files to the folder, you will need to \u0026lsquo;add\u0026rsquo; them to git so they are part of the version control\n This is why it is important to run \u0026ldquo;debuild clean\u0026rdquo; first so that the temporary debian files won\u0026rsquo;t be added to version control!\n Terminal command: git add -A\n All files in the wasta-custom-eth folder not already part of git version control will be added\n Confirm git status (can be done at any time)\n Terminal command: git status\n Commit changes to git\n Terminal command: git commit -am \u0026ldquo;\u0026lt;short commit message\u0026gt;\u0026ldquo;\n Example: git commit -am \u0026ldquo;Adding LibreOffice Extension\u0026rdquo;\n   Push changes to GitHub\n Terminal command: git push\n  5. Use Launchpad to test the automatically built package in the Wasta-Linux Testing PPA and then manually copy to the main Wasta-Linux PPA\n5.1: Monitor Package build in Launchpad\n  Wasta-Linux Team Launchpad site: https://launchpad.net/~wasta-linux  Under \u0026ldquo;Related Projects\u0026rdquo; in the bottom right there should be a link to each Wasta-Linux custom package project\n The Launchpad Wasta-Linux custom package project should automatically pull in any changes from the GitHub repository every 6 hours.\n The Launchpad Wasta-Linux custom package project should automatically build packages from the updated source code every 24 hours.\n If you need to speed up either of these 2 processes, you can trigger them manually from the Launchpad Wasta-Linux custom package project\u0026rsquo;s code and recipes. Please contact the Wasta-Linux team if you need assistance with this process.\n By default, the packages are built in the Wasta-Linux Testing PPA.\n  5.2: Test package created in Wasta-Linux Testing PPA\n  Ensure you have the Wasta-Linux Testing PPA added to your system  Terminal command: sudo add-apt-repository ppa:wasta-linux/wasta-testing\n Update your package lists\n Terminal command: sudo apt-get update\n Install package\n Terminal command: sudo apt-get install wasta-custom-xyz\n  5.3: Copy package from Wasta-Linux Testing PPA to main Wasta-Linux PPA\n  Any Wasta-Linux Launchpad member can copy packages between PPAs.  Follow this guide to become a Wasta-Linux Launchpad member.\n Package is now available to all Wasta-Linux users.\n  []{#anchor}\n"},{"idx":17,"href":"/hugo/home/customizing/maintain-package/","title":"Maintain a Custom Package","content":" Wasta-Linux: Maintain a Custom Package This page is part of the Wasta-Linux customizing process.\nGit is used for version control of all the Wasta-Linux custom packages. There is a Wasta-Linux organization on GitHub that contains separate GitHub repositories for each Wasta-Linux custom package. Any changes that are pushed up to these repositories are automatically copied every 6 hours to Launchpad, which is Ubuntu\u0026rsquo;s site for managing software. Once the code is in Launchpad, there is another automatic process that builds the actual software packages and places them in the Wasta-Linux Testing Launchpad PPA. Once the \u0026lsquo;Regional Customizer\u0026rsquo; (you!) confirms that the package from the Wasta-Linux Testing PPA is good, any Wasta-Linux Launchpad member can copy it to the main Wasta-Linux Launchpad PPA. This main PPA is already included in every Wasta-Linux system, so once the packages exist in the PPA, all Wasta-Linux users will be able to install them when they update their system.\nSo, as a maintainer of a Wasta-Linux custom package, all you will need to do is get your changes to GitHub, and after that you should find your updated package available for install in the next day when you update your system.\nHere then are the steps for maintaining a Wasta-Linux custom package. I will use the wasta-custom-eth package as an example.\n Setup (only needs to be done the first time)\n GitHub setup You will need to create a GitHub account and register your SSH key with GitHub. Follow the steps in this GitHub setup guide.\n Install dependencies You will need to install some dependencies on your machine in order to have the necessary tools for building packages.\n Terminal * command:\nsudo apt-get install build-essential devscripts dh-make dpkg-dev git   Configure git Git is used for version control so will need to be configured so that any changes you make will correctly be linked to your id.\n Terminal * commands: (execute commands 1 at a time)\ngit config --global user.email \u0026quot;you@example.com\u0026quot; git config --global user.name \u0026quot;Your Name\u0026quot;   Adjust your profile You need to adjust your profile settings so that your name and email will automatically be inserted when building the Wasta-Linux custom packages for local testing\n Terminal * command:\necho 'export DEBFULLNAME=Your\\ Name' \u0026gt;\u0026gt; ~/.profile   NOTE: the \\ delimiter is needed to account for the space in the name (between Your and Name in this example)  Terminal * command:\necho 'export DEBEMAIL=you@example.com' \u0026gt;\u0026gt; ~/.profile   NOTE: the user name and email address should match those used in step \u0026ldquo;1.c\u0026rdquo; above.   You will have to logout / login for these settings to take effect.\n Create a PGP key A PGP key is required to create a \u0026ldquo;local test package\u0026rdquo; of your Wasta-Linux custom package (see section 3 below)\n Open the Menu \u0026gt; Accessories \u0026gt; Passwords and Keys application\n Choose File \u0026gt; New and then choose \u0026ldquo;PGP Key\u0026rdquo;\n Important: do NOT enter a \u0026ldquo;key comment\u0026rdquo;, only enter \u0026ldquo;name\u0026rdquo; and \u0026ldquo;email\u0026rdquo;, or else there will be problems with using it later. The user name and email address should match those used in step \u0026ldquo;1.c\u0026rdquo; above. Setting the key to never expire should be OK. After entering a password, the key will be generated.\n Please wait, eventually the new key will show up under the \u0026ldquo;GnuPG Keys\u0026rdquo; tab, but unfortunately the application does not give much feedback during this key generation process    Create working folder You need a folder on your machine to use for the source code of the Wasta-Linux custom packages. You may create it in the location of your choice, such as your Documents folder. A suggestion is to name the folder wasta-packages, so it would look like this: /home/\u0026lt;username\u0026gt;/Documents/wasta-packages/.\n Clone package  Using the Wasta-Linux GitHub organization page, search for the wasta-custom-xyz GitHub repository that you would like to modify and click the copy to clipboard icon in the SSH clone url: section on the righthand side of the bottom of the page.\n Right click on the wasta-packages folder created in step \u0026ldquo;1.f\u0026rdquo; above and choose \u0026ldquo;Open in Terminal\u0026rdquo;\n Terminal * command:\ngit clone \u0026lt;pasted contents from your clipboard\u0026gt;  Example:\ngit clone git@github.com:wasta-linux/wasta-custom-eth.git   The \u0026ldquo;wasta-custom-eth\u0026rdquo; folder containing the current source code will now exist in your \u0026ldquo;wasta-packages\u0026rdquo; folder.\n  Get current source Right click on the \u0026ldquo;wasta-packages/wasta-custom-eth\u0026rdquo; folder and choose \u0026ldquo;Open in Terminal\u0026rdquo;\n Terminal * command:\ngit pull   Make changes to code Make any changes to the code, then we are ready to update the debian packaging files that are used to build the new version of the package.\n Debian folder references Here is a basic reference to the files in the \u0026ldquo;debian\u0026rdquo; folder, which is necessary to build the package after it finally arrives at Launchpad:\n debian/control: Most important debian file. Defines dependencies and other package details. debian/install: Defines files installed on the system when the package is installed.\nTypically Wasta-Linux custom packages have an \u0026ldquo;install-files\u0026rdquo; folder where all the files installed by a package reside. Confirm in this \u0026ldquo;debian/install\u0026rdquo; file.\nSometimes there is also a package name folder such as \u0026ldquo;wasta-custom-eth\u0026rdquo; in this example, that is installed to \u0026ldquo;/usr/share/wasta-custom-eth\u0026rdquo;. Again, this \u0026ldquo;debian/install\u0026rdquo; file will define these things.\n debian/changelog: Do NOT manually update this file, but instead use dch (see below).\n debian/postinst: Script executed after install of package. This should just call /usr/share/wasta-custom-eth/wasta-custom-eth-postinst.sh (I want this script easily accessible to others for reference: talk to me more if you want more gory details).\n  Update changelog Use dch to create the new version and enter comments regarding what changes you will make\n Terminal * command:\ndch --newversion 0.1.5   Replace 0.1.5 with your new version\n if prompted, choose /bin/nano as the editor, as it is the easiest to use.\n When using nano, the \u0026ldquo;^\u0026rdquo; character is entered using the Ctrl key on your keyboard.  Replace UNRELEASED with your series name\n 16.04: xenial 18.04: bionic  Enter some reasonable comments to document your changes. Reference older changelog entries for examples.\n Enter ^O (again, Ctrl + O) to save your changes.\n Enter ^X (again, Ctrl + X) to exit nano.\n    Build local test version  Terminal * command:\ndebuild -b  Builds a \u0026ldquo;.deb\u0026rdquo; package file for local testing\n You must have a PGP key set up that will sign the packages. Creating the PGP key is above in step \u0026ldquo;1.e\u0026rdquo;\n The resulting .deb will be created \u0026ldquo;up\u0026rdquo; one directory in the wasta-packages folder created in step \u0026ldquo;1.f\u0026rdquo;\n \u0026ldquo;Lintian\u0026rdquo; checks are done looking for any standards violations. Clean up any errors found and re-run until it is clean.\n You can \u0026ldquo;Google\u0026rdquo; the full lintian phrase to see the warning description. The following \u0026ldquo;warnings\u0026rdquo; can be ignored:\n Terminal output:\ndpkg-gencontrol: warning: Depends field of package wasta-custom-eth: unknown substitution variable ${shlibs:Depends}   Use the created .deb to install manually on another local machine for testing to ensure all changes are applied correctly.\n The testing machine must have the same \u0026ldquo;architecture\u0026rdquo; (32 bit or 64 bit) as the machine you created the .deb on.    Commit changes and push Git will now be used to commit the changes and then push them to GitHub.\n Clean up Important: first clean up from the debuild -b process!\nThe debuild -b process from step 4 above creates some temporary build files that we don\u0026rsquo;t want to keep. Clean them up! This is important or else the next step to add files to git will add these temporary files, which we don\u0026rsquo;t want.\n Terminal * command:\ndebclean   Add new files If you have added any new files to the folder, you will need to \u0026lsquo;add\u0026rsquo; them to git so they are under version control.\n This is why it is important to run debclean first so that the temporary debian files won\u0026rsquo;t be added to version control! Terminal * command:\ngit add --all  All files in the wasta-custom-xyz folder not already part of git version control will be added to it\n  Confirm git status (can be done at any time)\n Terminal * command:\ngit status   Commit changes Until your changes are \u0026ldquo;committed\u0026rdquo; they are not updated in git.\n Terminal * command:\ngit commit -am \u0026quot;\u0026lt;short commit message\u0026gt;\u0026quot;   Example:\ngit commit -am \u0026quot;Adding LibreOffice Extension\u0026quot;    Push changes Pushing changes will transfer the git commits / updates to GitHub.\n Terminal * command:\ngit push    Launchpad package creation Launchpad will auto-build the package from GitHub as described below.\n Monitor Launchpad test build  Wasta-Linux Team Launchpad site\n Under \u0026ldquo;Related Projects\u0026rdquo; in the bottom right there should be a link to each Wasta-Linux custom package project  Launchpad will automatically import source code from Github every 6 hours.\n Launchpad will automatically build new packages every 24 hours in the Wasta-Linux Testing PPA.\n Please contact the Wasta-Linux team if you need either of these processes expedited   Test package Before distributing the new package to all Wasta-Linux users, it is advisable to test install the package first, only submitting to other users after it is confirmed to be error free.\n Add Wasta Testing PPA Ensure you have the Wasta-Linux Testing PPA added to your system\n Terminal * command:\nsudo add-apt-repository ppa:wasta-linux/wasta-testing   Update your package lists  Terminal * command:\nsudo apt-get update   Install test package  Terminal * command:\nsudo apt-get install wasta-custom-xyz    Copy package to main PPA After confirming the package in the Wasta-Testing PPA is ready to be distributed to other users, it must be copied to the main Wasta-Linux PPA. Any Wasta-Linux Launchpad member can copy packages between PPAs.\n Follow this guide to become a Wasta-Linux Launchpad member.  The package is now available to all Wasta-Linux users.\n   * To open the Terminal, in Wasta-Linux go to Menu \u0026gt; Administration \u0026gt; Terminal, or press the following keys at the same time: Ctrl + Alt + T\n"},{"idx":18,"href":"/hugo/tutorials/","title":"Tutorials","content":""},{"idx":19,"href":"/hugo/tutorials/","title":"Tutorials","content":" Wasta-Linux: About "},{"idx":20,"href":"/hugo/home/ubuntu-migration/","title":"Ubuntu Migration","content":" How to turn Ubuntu into Wasta-Linux To take an existing Ubuntu 18.04 system and change it into Wasta-Linux 18.04, from a Terminal * perform the following steps:\n NOTE: Wasta-Linux only targets Ubuntu LTS (Long Term Support) releases, such as 18.04, 16.04, etc. Interim short-term Ubuntu releases such as 19.10, 19.04, etc. are not supported.   Get the Wasta-Linux core package installed: The following Terminal * commands (perform them one at a time) are needed to install the all-essential wasta-core-bionic package, which is the foundation for Wasta-Linux:\nsudo add-apt-repository ppa:wasta-linux/wasta sudo apt-get update sudo apt-get install wasta-core-bionic sudo apt-get update   NOTE: the second \u0026ldquo;apt-get update\u0026rdquo; is needed since wasta-core-bionic adds additional repositories to your computer, such as packages.sil.org and the wasta-apps ppa. You then need this second apt-get update to make the packages from those repositories available for installation.\n NOTE: you may want to restart your system at this point\n  Install Cinnamon: (recommended but optional)\nYou do not have to install the Cinnamon desktop interface and can continue using Ubuntu\u0026rsquo;s Unity desktop instead, but most Wasta-Linux tutorials and development focus revolve around the Cinnamon interface. Also note that even if you do install Cinnamon, the Ubuntu Unity desktop interface will not be removed, so you can continue using it or Cinnamon, whichever you prefer.\nThe following Terminal * commands (perform them one at a time) will install Cinnamon and set it as the default desktop interface:\nsudo add-apt-repository ppa:wasta-linux/cinnamon-4-2 sudo apt-get update sudo apt-get install wasta-cinnamon-bionic   NOTE: If you are prompted to choose a \u0026lsquo;login manager\u0026rsquo;, please select lightdm.\n NOTE: If your system still logs into Ubuntu\u0026rsquo;s default Gnome-Shell you can click the icon in the upper right of the user login box from the login screen and choose \u0026ldquo;Cinnamon\u0026rdquo;.\n  Run the relevant Wasta-Linux setup script: (recommended but optional)\n Option 1: Run the wasta-system-upgrade Terminal * command:\nsudo wasta-system-upgrade  This will perform the following steps:\n Install all software updates Install all default Wasta-Linux apps  Option 2: Run the wasta-initial-setup Terminal * command:\nsudo wasta-initial-setup  In addition to the steps executed by the wasta-system-upgrade script, this script will perform these additional steps:\n Remove unwanted apps You will be prompted so you can answer No to the question if you don\u0026rsquo;t want to remove the unwanted apps\n Install the Ubuntu \u0026ldquo;Hardware Enablement\u0026rdquo; stack This will upgrade the Linux Kernel and the x-server display server to the \u0026ldquo;Hardware Enablement\u0026rdquo; verisons distributed by Ubuntu, which is recommended for newer hardware.\n  NOTE: For either of the above 2 commands if you want to run the full process \u0026ldquo;non-interactively\u0026rdquo;, so that the app removals and other bits are done without prompting you, please append the auto parameter like this: sudo wasta-system-upgrade auto\n NOTE: You will definitely want to restart your system after this process has finished.\n  Congratulations, you are now running Wasta-Linux!  * To open the Terminal, in Wasta-Linux go to Menu \u0026gt; Administration \u0026gt; Terminal, or press the following keys at the same time: Ctrl + Alt + T\n"},{"idx":21,"href":"/hugo/wasta-apps/","title":"Wasta-apps","content":""},{"idx":22,"href":"/hugo/","title":"Wasta-Linux - Home","content":" Wasta-Linux: Functional, Familar, and Free! Wasta-Linux: Welcome to your new OS! Wasta-Linux: Get your Linux on! Wasta-Linux is a computer operating system perfect for anyone wanting a virus-resistant system that is not only free to share with anyone but also provides freedom of flexibility and customization.\nRegardless of what platform you\u0026rsquo;re coming from, Wasta-Linux has an intuitive interface that is made to look familiar. The default desktop looks and feels a lot like Microsoft Windows, while Wasta-Layout allows users to select interfaces inspired by macOS or Ubuntu Unity.\nWasta-Linux is ready \u0026ldquo;out of the box\u0026rdquo; for all your computing needs. Feel free to explore more about Wasta-Linux through the menu on the left or:\n Find more detail about Wasta-Linux on the Frequently Asked Questions page. Go directly to Download if you are ready to get your copy of Wasta-Linux to install. Wanting to customize to make your own version of Wasta-Linux for your users? Check the Customizing page. Why Linux is a good place to understand some of the background motivation for using Linux in a multi-national non-profit organization.  "},{"idx":23,"href":"/hugo/home/customizing/wasta-remastersys/","title":"Wasta0","content":" Wasta-Remastersys This page is part of the Wasta-Linux customizing process.\nThe Wasta-Linux ISOs are created using Wasta-Remastersys. Wasta-Remastersys is also pre-installed in Wasta-Linux so that anyone can use it to create their own customized Wasta-Linux ISO.\nIn order to create your own custom ISO, you can follow these steps:\n Install Wasta-Linux It is preferable to do this on a \u0026ldquo;clean test machine\u0026rdquo; designated for this process.\n Customize Wasta-Linux Follow either method listed on the Wasta-Linux customizing page.\n NOTE: Due to limitations of the ISO specification, there is a 4GB max size limitation on ISOs created with Wasta-Remastersys.  Copy all of your customizations to the \u0026ldquo;default user profile\u0026rdquo; In order to have the customizations you have made for the current user act as the defaults for new users, you need to copy the current user\u0026rsquo;s files to the \u0026ldquo;new user profile template folder\u0026rdquo; located at /etc/skel.\nTo copy all the configuration and settings you can use the wasta-remastersys-skelcopy Terminal * command. You need to provide the username that you want to serve as the basis for the \u0026ldquo;default user profile\u0026rdquo;:\n Terminal * command:\nsudo wasta-remastersys-skelcopy \u0026lt;username\u0026gt;   If you need additional items from a user\u0026rsquo;s home directory (such as training materials or other resources) copied to the default user profile folder, you will need to copy them manually.\nYou can confirm the default profile is set correctly by creating a new user onyour computer and then logging in as that new user. Everything should be correct (including all settings such as default user background, etc.). If not, you need to adjust the default user profile more and try again.\n Configure Wasta-Remastersys The Remastersys configuration settings are stored in the following file:\n/etc/wasta-remastersys/wasta-remastersys.conf  Notable things you may want to edit in this file include:\n LIVECDLABEL= Here you list the CD Label Name for the ISO. CUSTOMISO= This is the created ISO filename. INCLUDES= Here you can specify any additional folder you want to include in the remastered ISO. An example would be /home/data. If you included any files you want to distribute to all users in a \u0026lsquo;wasta-custom-xyz package\u0026rsquo;, this won\u0026rsquo;t be necessary.  Run Wasta-Remastersys Once you are ready, run this command from the Terminal * to start Wasta-Remastersys:\n Terminal command:\nsudo wasta-remastersys dist   Finished After the above command completes, your ISO (and a md5 checksum for it) will be ready in the /home/wasta-remastersys/wasta-remastersys folder. Install it on a USB drive and give it a test!\n* To open the Terminal, in Wasta-Linux go to Menu \u0026gt; Administration \u0026gt; Terminal, or press the following keys at the same time: Ctrl + Alt + T\n  "},{"idx":24,"href":"/hugo/home/why-linux/","title":"Why Linux?","content":"#Hello World\n"},{"idx":25,"href":"/hugo/wasta-apps/","title":"Why Linux?","content":"#Hello World\n"}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();